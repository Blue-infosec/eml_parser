pipeline {
  agent any

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 1, unit: 'HOURS')
    // Keep the 10 most recent builds
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  stages {
    stage ("Code pull"){
      steps{
          checkout scm
      }
    }

    stage('Lint') {
      steps {
        sh "tox"
      }
    }

    stage('Analysis - pylint') {
      steps {
        script { analyze_pylint() }
      }
    }

    stage('SonarQube analysis') {
      steps {
        withSonarQubeEnv('sonar') {
          sh "/opt/sonar-scanner/bin/sonar-scanner -Dproject.settings=.sonar-project.properties"
        }
      }
    }

    stage('Analysis - pyflakes') {
      steps {
        script { analyze_pyflakes() }
      }
    }

    stage('Test results') {
      steps {
        junit '**/junit-*.xml'
      }
    }

    stage('Coverage') {
      steps {
        script { analyze_coverage() }
      }
    }

    stage('Build package') {
      when {
        allOf {
          tag pattern: "v\\d+\\.\\d+\\.\\d+", comparator: "REGEXP"

          expression {
            currentBuild.result == null || currentBuild.result == 'SUCCESS'
          }
        }
      }
      steps {
        sh  ''' virtualenv -p python3 buildvenv
                source buildvenv/bin/activate
                rm -f dist/*
                python setup.py bdist_wheel
            '''
      }
      post {
        always {
          withCredentials([usernamePassword(credentialsId: 'apps1-pypiserver-jenkins', usernameVariable: 'TWINE_USERNAME', passwordVariable: 'TWINE_PASSWORD')]) {
            sh  ''' virtualenv -p python3 buildvenv
                    source buildvenv/bin/activate
                    pip install -U twine
                    twine upload dist/*.whl
                '''

          }
        }
      }
    }
  }
}


def analyze_pylint() {
      step([$class: 'WarningsPublisher', canComputeNew: false, canResolveRelativePaths: false, defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', parserConfigurations: [[parserName: 'PyLint', pattern: 'pylint.log']], unHealthy: ''])
}


def analyze_pyflakes() {
      step([$class: 'WarningsPublisher', canComputeNew: false, canResolveRelativePaths: false, defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', parserConfigurations: [[parserName: 'PyFlakes', pattern: 'pyflakes.log']], unHealthy: ''])
}

def analyze_coverage() {
      step([$class: 'CoberturaPublisher',
          autoUpdateHealth: false,
          autoUpdateStability: false,
          coberturaReportFile: '**/coverage-*.xml',
          failUnhealthy: false,
          failUnstable: false,
          maxNumberOfBuilds: 0,
          onlyStable: false,
          sourceEncoding: 'ASCII',
          zoomCoverageChart: false])
}
